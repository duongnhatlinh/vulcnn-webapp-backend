from app import db

class Vulnerability(db.Model):
    __tablename__ = 'vulnerabilities'

    id = db.Column(db.String(36), primary_key=True)
    scan_id = db.Column(db.String(36), db.ForeignKey('scans.id'), nullable=False)
    file_id = db.Column(db.String(36), db.ForeignKey('files.id'), nullable=False)
    function_name = db.Column(db.String(255))
    line_number = db.Column(db.Integer)
    severity = db.Column(db.String(50))  # high, medium, low
    vulnerability_type = db.Column(db.String(100))
    cwe_id = db.Column(db.String(50))
    description = db.Column(db.Text)
    code_snippet = db.Column(db.Text)
    recommendation = db.Column(db.Text)
    confidence_score = db.Column(db.Float)

    def __init__(self, id, scan_id, file_id, function_name, line_number, severity,
                 vulnerability_type, cwe_id, description, code_snippet=None,
                 recommendation=None, confidence_score=None):
        self.id = id
        self.scan_id = scan_id
        self.file_id = file_id
        self.function_name = function_name
        self.line_number = line_number
        self.severity = severity
        self.vulnerability_type = vulnerability_type
        self.cwe_id = cwe_id
        self.description = description
        self.code_snippet = code_snippet
        self.recommendation = recommendation
        self.confidence_score = confidence_score

    def to_dict(self):
        return {
            'id': self.id,
            'scan_id': self.scan_id,
            'file_id': self.file_id,
            'function_name': self.function_name,
            'line_number': self.line_number,
            'severity': self.severity,
            'vulnerability_type': self.vulnerability_type,
            'cwe_id': self.cwe_id,
            'description': self.description,
            'code_snippet': self.code_snippet,
            'recommendation': self.recommendation,
            'confidence_score': self.confidence_score
        }