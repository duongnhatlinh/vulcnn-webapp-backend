import requests
import os
import json

def process_vulnerabilities(scan_id):
    """
    Process vulnerabilities from a scan
    
    Args:
        scan_id (str): ID of the scan
        
    Returns:
        list: Processed vulnerabilities
    """
    # In a real implementation, this would query a database
    # For this example, we'll make a request to the API service
    api_url = os.environ.get('API_SERVICE_URL', 'http://api:5000')
    
    try:
        # Get scan results from API
        response = requests.get(
            f"{api_url}/api/scans/{scan_id}/results",
            headers={'Authorization': f"Bearer {os.environ.get('INTERNAL_API_TOKEN')}"}
        )
        
        if response.status_code != 200:
            print(f"Error getting scan results: {response.text}")
            return []
        
        results = response.json()
        
        # Extract vulnerabilities
        all_vulnerabilities = []
        for file_result in results.get('results', []):
            file_info = file_result.get('file', {})
            vulnerabilities = file_result.get('vulnerabilities', [])
            
            for vuln in vulnerabilities:
                # Add file info to vulnerability
                vuln['file_name'] = file_info.get('filename', 'Unknown')
                all_vulnerabilities.append(vuln)
        
        # Process and enhance vulnerabilities
        processed_vulnerabilities = enhance_vulnerabilities(all_vulnerabilities)
        
        return processed_vulnerabilities
    
    except Exception as e:
        print(f"Error processing vulnerabilities: {str(e)}")
        return []

def enhance_vulnerabilities(vulnerabilities):
    """
    Enhance vulnerability information with additional details
    
    Args:
        vulnerabilities (list): List of vulnerability dictionaries
        
    Returns:
        list: Enhanced vulnerabilities
    """
    enhanced = []
    
    for vuln in vulnerabilities:
        # Add standard CWE descriptions if missing
        if 'cwe_id' in vuln and not vuln.get('description'):
            vuln['description'] = get_cwe_description(vuln['cwe_id'])
        
        # Add recommendations if missing
        if not vuln.get('recommendation'):
            vuln['recommendation'] = generate_recommendation(vuln)
        
        enhanced.append(vuln)
    
    return enhanced

def get_cwe_description(cwe_id):
    """Get standard description for a CWE ID"""
    # This would typically use a database or API
    # For simplicity, we'll use a small hardcoded dictionary
    cwe_descriptions = {
        'CWE-119': 'A buffer overflow condition exists that could allow an attacker to crash the program or execute arbitrary code.',
        'CWE-20': 'The program does not properly validate input, which can lead to various security issues.',
        'CWE-125': 'Out-of-bounds read occurs when the program reads data past the end of the allocated buffer.',
        'CWE-134': 'Format string vulnerability allows an attacker to view memory or execute code.',
        'CWE-190': 'Integer overflow or wraparound can lead to buffer overflows or other memory corruption.',
        'CWE-416': 'Use after free occurs when a program continues to use memory after it has been freed.',
        'CWE-476': 'NULL pointer dereference occurs when the program dereferences a NULL pointer.',
        'CWE-787': 'Out-of-bounds write occurs when the program writes data past the end of the allocated buffer.',
        'CWE-772': 'The program does not release a resource after it has been used.'
        # Add more as needed
    }
    
    return cwe_descriptions.get(cwe_id, f"Vulnerability related to {cwe_id}")

def generate_recommendation(vulnerability):
    """Generate a recommendation based on vulnerability type"""
    vuln_type = vulnerability.get('vulnerability_type') or vulnerability.get('type', '').lower()
    cwe_id = vulnerability.get('cwe_id', '')
    
    # Buffer overflow recommendations
    if 'buffer' in vuln_type or 'cwe-119' in cwe_id.lower() or 'cwe-787' in cwe_id.lower():
        return "Use safer functions that include bounds checking (e.g., strncpy instead of strcpy). Validate input sizes and ensure buffers are large enough. Consider using safer string handling libraries."
    
    # Format string recommendations
    elif 'format' in vuln_type or 'cwe-134' in cwe_id.lower():
        return "Use format specifiers with all printf-family functions. Do not pass user-controlled input as the format string."
    
    # Integer overflow recommendations
    elif 'integer' in vuln_type or 'cwe-190' in cwe_id.lower():
        return "Use appropriate integer types and check for overflow before performing arithmetic operations. Consider using safe integer libraries."
    
    # Resource leak recommendations
    elif 'leak' in vuln_type or 'resource' in vuln_type or 'cwe-772' in cwe_id.lower():
        return "Ensure all allocated resources are properly freed. Use RAII patterns in C++ or finally blocks in languages that support them."
    
    # Default recommendation
    return "Review the code for security issues and follow secure coding practices appropriate for the vulnerability type."